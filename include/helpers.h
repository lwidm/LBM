#ifndef HELPERS_H
#define HELPERS_H

#define __STDC_WANT_LIB_EXT1__ 1
#define __STDC_LIB_EXT1__
#include "Eigen/Dense"
#include "main.h"
/**
 * \enum Log_level
 * \brief Defines the various log levels for logging messages.
 *
 * This enumeration defines different levels of logging messages that can be
 * used to categorize the importance or type of message being logged.
 *
 * - \c LOG_LEVEL_OFF: No logging.
 * - \c LOG_LEVEL_ERR: Logs errors using the `print_err` function.
 * - \c LOG_LEVEL_WRN: Logs warnings to the console with the prefix "WARNING".
 * - \c LOG_LEVEL_INF: Logs informational messages to the console with the
 * prefix "INFO".
 * - \c LOG_LEVEL_DBG: Logs debug messages to the console with the prefix
 * "DEBUG".
 *
 * These log levels can be used to control the amount and type of logging output
 * generated by the program.
 *
 * \see log: Logging function.
 * \see LOG_LEVEL: Globally set log-level.
 * \see print_err: Function for printing errors.
 *
 */
// clang-format off
typedef enum {
  LOG_LEVEL_OFF = 0, ///< No logging.
  LOG_LEVEL_ERR, ///< Logs errors to the console with the prefix "ERROR" (using the `print_err` function)
  LOG_LEVEL_WRN, ///< Logs warnings to the console with the prefix "WARNING"
  LOG_LEVEL_INF, ///< Logs informational messages to the console with the prefix "INFO"
  LOG_LEVEL_DBG ///< Logs debug messages to the console with the prefix "DEBUG"
} Log_level;
// clang-format on

/**
 * \def LOG_LEVEL
 * \brief Defines the global log level for the logging system.
 *
 * This macro defines the global log level for the logging system. Messages
 * with a log level higher than this value will not be logged. The log level
 * can be adjusted to control the verbosity of logging output.
 *
 * \see log: Logging function
 * \see Log_level: Different kinds of log levels
 */
#define LOG_LEVEL LOG_LEVEL_DBG

void log(std::string filename, std::string message, Log_level log_level);

/**
 * \def LOG_ERR(filename, message)
 * \brief Logs an error message.
 *
 * This macro logs an error using the `print_err` and `log` functions with the
 * error log level.
 *
 * \param[in] filename The name of the file from which the log message
 * originates.
 * \param[in] message The error message to be logged.
 *
 * \see LOG_LEVEL: Globally set log-level.
 * \see Log_level: Different kinds of log levels.
 * \see log: Logging function.
 * \see print_err: Function for printing errors.
 */
#define LOG_ERR(filename, message) log(filename, message, LOG_LEVEL_ERR)
/**
 * \def LOG_WRN(filename, message)
 * \brief Logs a warning message.
 *
 * This macro logs a warning message using the `log` function with the
 * warning log level.
 *
 * \param[in] filename The name of the file from which the log message
 * originates.
 * \param[in] message The warning message to be logged.
 *
 * \see LOG_LEVEL: Globally set log-level.
 * \see Log_level: Different kinds of log levels.
 * \see log: Logging function.
 */
#define LOG_WRN(filename, message) log(filename, message, LOG_LEVEL_WRN)
/**
 * \def LOG_INF(filename, message)
 * \brief Logs a info message.
 *
 * This macro logs a info message using the `log` function with the
 * info log level.
 *
 * \param[in] filename The name of the file from which the log message
 * originates.
 * \param[in] message The info message to be logged.
 *
 * \see LOG_LEVEL: Globally set log-level.
 * \see Log_level: Different kinds of log levels.
 * \see log: Logging function.
 */
#define LOG_INF(filename, message) log(filename, message, LOG_LEVEL_INF)
/**
 * \def LOG_DBG(filename, message)
 * \brief Logs a debug message.
 *
 * This macro logs a debug message using the `log` function with the
 * debug log level.
 *
 * \param[in] filename The name of the file from which the log message
 * originates.
 * \param[in] message The debug message to be logged.
 *
 * \see LOG_LEVEL: Globally set log-level.
 * \see Log_level: Different kinds of log levels.
 * \see log: Logging function.
 */
#define LOG_DBG(filename, message) log(filename, message, LOG_LEVEL_DBG)

Grid meshgrid(const Gridsize &gridsize, const GridVectors &gridvectors);

Eigen::ArrayXXd curlZ(const Eigen::ArrayXXd &ux, const Eigen::ArrayXXd &uy,
                      const Gridsize &gridsize, const double dr);

#endif // HELPERS_H
